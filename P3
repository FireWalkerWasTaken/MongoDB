// app.js

const express = require('express');
const mongoose = require('mongoose');
const app = express();

app.use(express.json());

// 1. Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/ecommerceDB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));

// 2. Define Product schema with nested variants
const variantSchema = new mongoose.Schema({
    color: { type: String, required: true },
    size: { type: String, required: true },
    stock: { type: Number, required: true }
});

const productSchema = new mongoose.Schema({
    name: { type: String, required: true },
    price: { type: Number, required: true },
    category: { type: String, required: true },
    variants: [variantSchema] // nested documents
});

const Product = mongoose.model('Product', productSchema);

// 3. Sample Products (run once to populate DB)
app.get('/seed', async (req, res) => {
    try {
        const sampleProducts = [
            {
                name: "T-Shirt",
                price: 499,
                category: "Clothing",
                variants: [
                    { color: "Red", size: "M", stock: 20 },
                    { color: "Blue", size: "L", stock: 15 }
                ]
            },
            {
                name: "Sneakers",
                price: 2999,
                category: "Footwear",
                variants: [
                    { color: "White", size: "42", stock: 10 },
                    { color: "Black", size: "43", stock: 5 }
                ]
            },
            {
                name: "Backpack",
                price: 899,
                category: "Accessories",
                variants: [
                    { color: "Green", size: "Standard", stock: 8 },
                    { color: "Black", size: "Large", stock: 12 }
                ]
            }
        ];

        await Product.insertMany(sampleProducts);
        res.send("Sample products inserted!");
    } catch (err) {
        res.status(500).send({ error: err.message });
    }
});

// 4. CRUD / Query Endpoints

// Get all products
app.get('/products', async (req, res) => {
    try {
        const products = await Product.find();
        res.json(products);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Filter products by category
app.get('/products/category/:category', async (req, res) => {
    try {
        const products = await Product.find({ category: req.params.category });
        res.json(products);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Project only variant details of a product
app.get('/products/:id/variants', async (req, res) => {
    try {
        const product = await Product.findById(req.params.id, 'name variants'); // only select name & variants
        if (!product) return res.status(404).json({ error: 'Product not found' });
        res.json(product);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Start server
const PORT = 3000;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));
